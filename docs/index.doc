
= AirtimeSignup G2 - Documentation

:Author:    Benjamin Kampmann; Patricia Garcia
:Date:      Nov 30th, 2013
:Revision:  1


== Setup

=== Requirements:
 
AirtimeSignup G2 runs on Python 2.7 and uses pip and virtualenv to manage packages. Please refer to your distributions reference to learn how to install python2.7 and pip. Once you have pip installed to install virtual env, please  do:

  pip install virtualenv

=== Setting up

Navigate to the main directory of this checkout or whereever you zipped the package and run:


 virtualenv .
 source bin/activate
 (v)$ pip install -r requirements.txt

Please make sure to run all commands prefixed "(v)$" from within the virtual environment .

Now you have all packages installed in the virtual environment to run the app server. 

=== Configure the database

The database can be configured by changing the DATABASE_URL in `airtimesignup/config.y` to the desired URL. AirtimeSignup uses sqlalchemy, which supports many different SQL database backends. In order to understand what configuration is needed for your setup please refer to link:http://pythonhosted.org/Flask-SQLAlchemy/config.html[] .

Once the database URL is configured please run (within your virtual environment)
 
 (v)$ alembic upgrade head

To upgrade the schema to the latest version

=== Compass setting up and use:

A Ruby installation is required to use compass, please follow the instructions in link:https://www.ruby-lang.org/en/downloads/[].

Then install compass as explained in link:http://compass-style.org/install/[].


Compass allows to write cleaner css files, using sass syntax (link:http://sass-lang.com/[]) and to avoid the need of browser specific prefixes through the use of mixins. See more in link:http://compass-style.org/[].


To use compass write your styles in the '.scss' files contained in /static/css/sass/ folder.

Then run 

   $ compass watch
   
and the '.css' files will be generated automatically whenever a '.scss' file changes. 
   
=== Running the Dev Server

If you run

 (v)$ python app.py

you should be able to see your website at "link:http://127.0.0.1:5000/[]".

=== Digging into the code

The basic structure of the project looks like this (important ones expanded for clarity)

 airtime-signup-g2
   \ -- bin                 		<= auto generated binaries for virtual env
   |    
   \ -- airtimesignup       		<= source code of the actual app
   |     \ -- templates      		<= jinja2/html templates for the app
   |     | -- __init__.py          	<= empty stub
   |     | -- app.py               	<= MAIN ENTRY to the App
   |     | -- checkvat.py          	<= helper, managing VAT checking
   |     | -- config.py            	<= configuration of the App, also loads the YAML
   |     | -- database.py          	<= database connection helper
   |     | -- models.py            	<= database model definitions
   |     + -- user_management.py   	<= user management implementation
   |
   \ -- alembic             		<= alembic database migrations
   |    \ -- versions       		<= each individual migration step
   |
   \ -- docs                		<= where you found this documentation
   |
   \ -- include             		<= auto generated for virtual env
   |
   \ -- lib                 		<= auto generated: libs and packgeds used
   |
   \ -- static              		<= static files served by the App
   |    \ -- css            		<= CSS Stylesheets
   |          \ -- img                  <= CSS specific images
   |          \ -- sass                 <= sass source getting compiled to CSS
   |    \ -- fonts          		<= custom Fonts used
   |    \ -- img            		<= images
   |    \ -- js             		<= Javascript files
   |
   | -- airtime.yml         		<= Package and Callback configuration
   | -- alembic.ini         		<= Configuration for Alembic Database Migrations
   | -- app.py         		        <= airtimesignup/app.py wrapper
   | -- config.rb         		<= Compass/Sass configuration
   | -- requirements.txt                <= Python libs required to build and run the project

As you can see the main entry point (and file with the most code) is `airtimesignup/app.py`.

# Deployment

This app is build using flask. Any of the link:http://flask.pocoo.org/docs/deploying/wsgi-standalone/[here mentioned] ways can be used to run a deployment services. Don't forget to disable "DEBUG"-mode in airtimesignup/config.py


=== Technical configuration

Is done through `airtimesignup/config.py` and requires the app to be restarted after every change. It is a simple Python Configuration format. Specifically you can configure:


 * DEBUG: whether the app shall run in debug mode, giving full tracebacks and debugging console on errors. Can be either `True` or `False`. Default: `False`
 * DATABASE_URL: The database to connect to. See link:http://pythonhosted.org/Flask-SQLAlchemy/config.html[].  Default: "sqlite:///test.db"
 * SESSION_SECRET: please put a random secret here to be used to encrypt session cookies
 * PAYMENT_URL: the target url to the payment provider to forward the user to. Put curly brakets to identify where to put the callback url. Default: "/payment/fake?callback={}"

=== Pricing configuration

It happens through the airtime.yml config file. There are three sections for pricing configuration (respect the indentation!):

=== Currencies:

Add here new currencies, they'll be automatically shown in the currency dropdown in the select package page (the order is preserved). You have to provide information for the following fields:

* label: the label to identify the currency in the database. It has to be a single word, if you want to use more than one word use '_' to separate them.
* name: the name of the currency for display in the currency dropdown.
* symbol: symbol identifying the currency, use for display in every page in the application.

Note: the first currency provided is considered the default one.

Example:

   Currencies:
     - label: usd
       name: "USD"
       symbol: "$"
     - label: eur
       name: "Euro"
       symbol: "â‚¬"


=== Packages:

The available packages. The fields to be provided are:

   * label: again label to identify package in the database and in the json provided by the application when checkout completed (single word, no spaces).
   * title: the actual name of the package to be displayed in the different pages.
   * description: a description of the package, to be shown in the package page. You can include some html tags in this description (if for example you want to emphasize some part of it).
   * price: the price field contains one field which each of the currencies defined in the "Currencies" section, in the form "currency" (the currency label as provided in the "Currencies" section): "price". Make sure to use the proper notation for the price (use '.' not ',' for decimals).

Example:
   
   Packages:
     - label: starter
       title: "Starter"
       description: "First month free, 10 GB Storage included"
       price:
         usd: 24.95
         eur: 1
         gbp: 2
     - label: plus
       title: "Plus"
       description: "30 GB Storage included"
       price:
         usd: 49.95
         eur: 1
         gbp: 2
   

=== Upgrades:

Includes all the information relative to available upgrades and options. New upgrades will be added to the package page automatically, the order is preserved. The fields to be provided are:

* label: as before, the label to identify the upgrade in the database and order checkout json (single word, no spaces).
* title: the name of the upgrade.
* description: information about the upgrade. You can use some html tags inside it.
* options: the different options available for the upgrade. Contains:
   ** label: the upgrade option is also represented by a label (single word, no spaces).
   ** title: name of the option.
   ** description: explanation about the option, can contain html.
   ** price: same as for packages (include different field for different currencies).

Example:

   Upgrades:
     - label: extra_storage
       title: "Extra Storage"
       description: "Storage (GB)"
       options:
         - label: silver
           title: "Silver"
           description: "5 GB"
           price:
             usd: 4.99
             eur: 1
             gbp: 2
         - label: gold
           title: "Gold"
           description: "50 GB"
           price:
             usd: 39.99
             eur: 1
             gbp: 2


=== Callback configuration

As of now, there are two major callback to be called and both are configured through the `airtime.yaml` configuration file in the "APIs" section:

 - domain_check: is a full-url send a get request to with the curly brakets being replaced with the check for the domain. Expects to receive a JSON as response in which "available" is either true or false (see app.py Line 40 following). If not given, no request is made and all domains are accepted
 - paid_callback: a url to post the full JSON data of that transfer to once the payment has been done. If not given, no call is made. See app.py Line 163 following for details.


=== Troubleshooting:


==== When running `python app.py` it fails with a "no module named flask"

If you see this

	Traceback (most recent call last):
	  File "app.py", line 1, in <module>
	    from airtimesignup.app import app
	  File "/Users/benjaminkampmann/dev/airtime-signup-g2/airtimesignup/app.py", line 2, in <module>
	    from flask import (Flask, render_template, jsonify, request,
	ImportError: No module named flask

when running the app, it means your virtual environment has not been configured properly. Make sure you are running it from within the virtual environment by running `source bin/activate` and if it still doesn't work, re-run `pip install -r requirements.txt`.

== References:

Airtime Signup G2 uses:

 * Flask for Web Handling: http://flask.pocoo.org/
 * SQLAlchemy for Database Access: http://docs.sqlalchemy.org/en/rel_0_8/
 * Alembic for Database migrations: https://alembic.readthedocs.org/en/latest/index.html
 * Twitter Bootstrap as UI-Framework: http://getbootstrap.com/
 * with jQuery for Interaction: http://api.jquery.com/
